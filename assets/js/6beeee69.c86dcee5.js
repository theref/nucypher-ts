"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[786],{3905:(e,t,r)=>{r.d(t,{Zo:()=>c,kt:()=>u});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var p=n.createContext({}),s=function(e){var t=n.useContext(p),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},c=function(e){var t=s(e.components);return n.createElement(p.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},y=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,p=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),y=s(r),u=a,m=y["".concat(p,".").concat(u)]||y[u]||d[u]||o;return r?n.createElement(m,i(i({ref:t},c),{},{components:r})):n.createElement(m,i({ref:t},c))}));function u(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,i=new Array(o);i[0]=y;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var s=2;s<o;s++)i[s]=r[s];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}y.displayName="MDXCreateElement"},4470:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>d,frontMatter:()=>o,metadata:()=>l,toc:()=>s});var n=r(7462),a=(r(7294),r(3905));const o={slug:"strategy"},i="Strategy",l={unversionedId:"Strategy",id:"Strategy",title:"Strategy",description:"A Strategy combines all possible configuration parameters for using CBD.",source:"@site/docs/Strategy.md",sourceDirName:".",slug:"/strategy",permalink:"/nucypher-ts/strategy",draft:!1,tags:[],version:"current",frontMatter:{slug:"strategy"},sidebar:"tutorialSidebar",previous:{title:"Condition Set",permalink:"/nucypher-ts/condition_set"},next:{title:"Glossary",permalink:"/nucypher-ts/Glossary.md"}},p={},s=[{value:"Create a Strategy",id:"create-a-strategy",level:2},{value:"Deploy a Strategy",id:"deploy-a-strategy",level:2},{value:"Import and Export Strategies",id:"import-and-export-strategies",level:2}],c={toc:s};function d(e){let{components:t,...r}=e;return(0,a.kt)("wrapper",(0,n.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"strategy"},"Strategy"),(0,a.kt)("p",null,"A Strategy combines all possible configuration parameters for using ",(0,a.kt)("a",{parentName:"p",href:"./cdb"},"CBD"),".\nIt takes the following parameters:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"cohort")," - a ",(0,a.kt)("a",{parentName:"li",href:"./cohort"},(0,a.kt)("inlineCode",{parentName:"a"},"Cohort"))," object"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"startDate")," - the Strategy is valid from this date onwards"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"endDate"),"- the Strategy becomes invalid after this date"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"conditionSet?")," - an optional ",(0,a.kt)("a",{parentName:"li",href:"./condition_set"},(0,a.kt)("inlineCode",{parentName:"a"},"ConditionSet")),". If used, all encryptions made via this strategy have a default Condition Set assigned"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"aliceSecretKey?")," - an optional Secret Key for the encrypter"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"bobSecretKey?")," - an optional SecretKey for decrypter")),(0,a.kt)("p",null,"If the optional secret keys are not provided, new ones will be generated instead."),(0,a.kt)("h2",{id:"create-a-strategy"},"Create a Strategy"),(0,a.kt)("p",null,"Assuming we have a ",(0,a.kt)("a",{parentName:"p",href:"./cohort"},"Cohort")," already defined, we can construct a Strategy:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"import { Cohort, Strategy } from '@nucypher/nucypher-ts';\n\nconst config = {\n  threshold: 3,\n  shares: 5,\n  porterUri: 'https://porter-ibex.nucypher.community',\n};\nconst newCohort = await Cohort.create(config);\n\nconst newStrategy = Strategy.create(\n  newCohort,\n  new Date(),\n  new Date(Date.now() + 1000 * 60 * 60 * 24 * 30), // 30 days\n);\n")),(0,a.kt)("h2",{id:"deploy-a-strategy"},"Deploy a Strategy"),(0,a.kt)("p",null,"Before we can encrypt/decrypt, the Threshold network needs to be made aware of our Strategy.\nWe do this by deploying:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"import detectEthereumProvider from '@metamask/detect-provider';\nimport providers from 'ethers';\n\nconst MMprovider = await detectEthereumProvider();\nconst rinkeby = providers.providers.getNetwork('Rinkeby');\n\nif (MMprovider) {\n  const web3Provider = new providers.providers.Web3Provider(\n    MMprovider,\n    rinkeby\n  );\n  const newDeployed = await newStrategy.deploy('test', web3Provider);\n}\n")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"Strategy.deploy")," takes 2 parameters:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"label")," - this is a string that the network uses to identify the strategy"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"provider")," - deploying a Strategy requires writing to a smart contract, so a connection to a wallet is required via a Web3 provider")),(0,a.kt)("p",null,"Deploying a strategy returns a new ",(0,a.kt)("inlineCode",{parentName:"p"},"DeployedStrategy")," object.\nThis object grants us access to the ",(0,a.kt)("inlineCode",{parentName:"p"},"encrypter")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"decrypter")," which can then be used throughout an application."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"const encrypter = newDeployed.encrypter;\nconst decrypter = newDeployed.decrypter;\n\nconst plaintext = 'this is a secret';\nconst encryptedMessageKit = encrypter.encryptMessage(plaintext);\n\nconst decryptedMessage = await decrypter.retrieveAndDecrypt([\n  encryptedMessageKit,\n]);\n")),(0,a.kt)("h2",{id:"import-and-export-strategies"},"Import and Export Strategies"),(0,a.kt)("p",null,"Strategies can be exported allowing them to be reused easily.\nThe syntax is the same whether the strategy has been deployed or not."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"import { DeployedStrategy } from '@nucypher/nucypher-ts';\n\nconst configJSON = newDeployed.toJSON();\nconsole.log(configJSON)\n/*\nLARGE JSON OBJECT\n*/\nconst importedStrategy = DeployedStrategy.fromJSON(configJSON)\n")))}d.isMDXComponent=!0}}]);